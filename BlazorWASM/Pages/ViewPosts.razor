@page "/ViewPosts"
@using Domain.Models
@using HttpClients.ClientInterfaces
@using UIComponents
@using Domain.DTOs
@inject IPostService PostService
@inject NavigationManager navMgr

<h3>Posts</h3>
<div class="filter-bar">
    <div class="filters-container">
        <img src="icons/@(doShowFilters ? "clear_" : "")funnel.png" class="funnel" @onclick="@(() => doShowFilters = !doShowFilters)" alt="Funnel"/>
        @if (doShowFilters)
        {
            <div class="filter">
                <label>Username:</label>
                <input type="text" @bind="usernameFilter"/>
            </div>
            <div class="filter">
                <label>User id:</label>
                <input type="number" @bind="userIdFilter"/>
            </div>
            <div class="filter">
                <label>Is published?</label>
                <select @bind="publishedStatusFilter">
                    <option value="all">All</option>
                    <option value="true">Yes</option>
                    <option value="false">No</option>
                </select>
            </div>
            <div class="filter">
                <label>Title contains:</label>
                <input type="text" @bind="titleContainsFilter"/>
            </div>
        }
    </div>
</div>

<div>
    <button @onclick="LoadPosts">Load</button>
</div>

@if (post == null)
{
}
else if (!post.Any())
{
    <p>No Posts to display</p>
}
else
{
    
    <table class="table">
        <thead>
        <tr>
            <th>Post ID</th>
            <th>Owner ID</th>
            <th>Title</th>
            <th>Published?</th>
            <th>Edit</th>
            <th>Delete?</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in post)
        {
            <AuthorizeView>
                @if((@context.User.Identity != null && @context.User.Identity.Name.Equals(item.Owner.UserName))||item.Published)
                {
                <tr>
                        <td>@item.Id</td>
                        <td>@item.Owner.UserName</td>
                        <td>@item.Title</td>
                        <td>
                            <FancyCheckBox IsCompleted="@item.Published" OnChange="@((status) => Published(item, status))"/>
                        </td>
                        <td>
                            <img src="icons/edit.gif" class="funnel" @onclick="@(() => navMgr.NavigateTo($"/EditPost/{item.Id}"))"/>
                        </td>
                        <td>
                            <label @onclick="@(() => RemovePost(item.Id))" style="cursor:pointer; color: red; font-weight: bold">
                                &#x2717;
                            </label>
                        </td>
                        <td><label></label></td>
                    </tr>
                }
            </AuthorizeView>
            
        }
        </tbody>
    </table>
    
}
@if (!string.IsNullOrEmpty(msg))
{
    <label style="color: red">@msg</label>
}

@code {
    private IEnumerable<Post>? post;
    private string msg = "";
    private bool doShowFilters = false;

    private string? usernameFilter;
    private int? userIdFilter;
    private string? publishedStatusFilter;
    private string? titleContainsFilter;

    private async Task LoadPosts()
    {
        try
        {
            bool? publishedStatusValue = null;
            if (!string.IsNullOrEmpty(publishedStatusFilter) && !publishedStatusFilter.Equals("all"))
            {
                publishedStatusValue = bool.Parse(publishedStatusFilter);
            }
            post = await PostService.GetAsync(usernameFilter, userIdFilter, publishedStatusValue, titleContainsFilter);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task Published(Post item, bool status)
    {
        PostUpdateDto dto = new(item.Id)
        {
            Published = status
        };
        try
        {
            await PostService.UpdateAsync(dto);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task RemovePost(int postId)
    {
        msg = "";
        try
        {
            await PostService.DeleteAsync(postId);
            
            var list = new List<Post>(post!);
            list.RemoveAll(post => post.Id == postId);
            post = list.AsEnumerable();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
}